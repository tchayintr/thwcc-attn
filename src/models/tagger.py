import constants
from models.util import ModelUsage
from models.rnn_tagger import RNNTagger
from models.rnn_with_cc_tagger import RNNTaggerWithCC
from models.rnn_with_chunk_tagger import RNNTaggerWithChunk
from models.rnn_with_chunk_cc_tagger import RNNTaggerWithChunkCC
from models.rnn_with_chunk_sw_tagger import RNNTaggerWithChunkSubword
from models.tfm_tagger import TFMTagger


def construct_RNNTagger(n_vocab,
                        unigram_embed_size,
                        n_bigrams,
                        bigram_embed_size,
                        n_chunks,
                        chunk_embed_size,
                        n_subwords,
                        subword_embed_size,
                        n_ccs,
                        cc_embed_size,
                        rnn_unit_type,
                        rnn_bidirection,
                        rnn_batch_first,
                        rnn_n_layers,
                        rnn_hidden_size,
                        rnn_n_layers2,
                        rnn_hidden_size2,
                        rnn_n_layers3,
                        rnn_hidden_size3,
                        mlp_n_layers,
                        mlp_hidden_size,
                        n_labels,
                        use_crf=True,
                        mlp_additional_hidden_size=0,
                        rnn_dropout=0.0,
                        biaffine_dropout=0,
                        embed_dropout=0.0,
                        mlp_dropout=0.0,
                        chunk_vector_dropout=0,
                        subword_vector_dropout=0,
                        cc_vector_dropout=0,
                        pretrained_unigram_embed_size=0,
                        pretrained_bigram_embed_size=0,
                        pretrained_chunk_embed_size=0,
                        pretrained_subword_embed_size=0,
                        pretrained_cc_embed_size=0,
                        pretrained_embed_usage=ModelUsage.NONE,
                        chunk_pooling_type=constants.AVG,
                        subword_pooling_type=constants.AVG,
                        cc_pooling_type=constants.AVG,
                        min_chunk_len=1,
                        max_chunk_len=0,
                        chunk_loss_ratio=0,
                        min_subword_len=1,
                        max_subword_len=0,
                        subword_loss_ratio=0,
                        min_cc_len=1,
                        max_cc_len=0,
                        cc_loss_ratio=0,
                        biaffine_type='',
                        reverse=False):
    tagger = None

    if (n_chunks > 0 and chunk_embed_size > 0) and (n_ccs > 0
                                                    and cc_embed_size > 0):
        tagger = RNNTaggerWithChunkCC(
            n_vocab=n_vocab,
            unigram_embed_size=unigram_embed_size,
            n_bigrams=n_bigrams,
            bigram_embed_size=bigram_embed_size,
            n_chunks=n_chunks,
            chunk_embed_size=chunk_embed_size,
            n_ccs=n_ccs,
            cc_embed_size=cc_embed_size,
            rnn_unit_type=rnn_unit_type,
            rnn_bidirection=rnn_bidirection,
            rnn_batch_first=rnn_batch_first,
            rnn_n_layers1=rnn_n_layers,
            rnn_hidden_size1=rnn_hidden_size,
            rnn_n_layers2=rnn_n_layers2,
            rnn_hidden_size2=rnn_hidden_size2,
            rnn_n_layers3=rnn_n_layers3,
            rnn_hidden_size3=rnn_hidden_size3,
            mlp_n_layers=mlp_n_layers,
            mlp_hidden_size=mlp_hidden_size,
            n_labels=n_labels,
            use_crf=use_crf,
            embed_dropout=embed_dropout,
            rnn_dropout=rnn_dropout,
            biaffine_dropout=biaffine_dropout,
            mlp_dropout=mlp_dropout,
            chunk_vector_dropout=chunk_vector_dropout,
            cc_vector_dropout=cc_vector_dropout,
            pretrained_unigram_embed_size=pretrained_unigram_embed_size,
            pretrained_bigram_embed_size=pretrained_bigram_embed_size,
            pretrained_chunk_embed_size=pretrained_chunk_embed_size,
            pretrained_cc_embed_size=pretrained_cc_embed_size,
            pretrained_embed_usage=pretrained_embed_usage,
            chunk_pooling_type=chunk_pooling_type,
            cc_pooling_type=cc_pooling_type,
            min_chunk_len=min_chunk_len,
            max_chunk_len=max_chunk_len,
            min_cc_len=min_cc_len,
            max_cc_len=max_cc_len,
            chunk_loss_ratio=chunk_loss_ratio,
            cc_loss_ratio=cc_loss_ratio,
            biaffine_type=biaffine_type,
            reverse=reverse)

    elif (n_chunks > 0 and chunk_embed_size > 0) and (n_subwords > 0 and
                                                      subword_embed_size > 0):
        tagger = RNNTaggerWithChunkSubword(
            n_vocab=n_vocab,
            unigram_embed_size=unigram_embed_size,
            n_bigrams=n_bigrams,
            bigram_embed_size=bigram_embed_size,
            n_chunks=n_chunks,
            chunk_embed_size=chunk_embed_size,
            n_subwords=n_subwords,
            subword_embed_size=subword_embed_size,
            rnn_unit_type=rnn_unit_type,
            rnn_bidirection=rnn_bidirection,
            rnn_batch_first=rnn_batch_first,
            rnn_n_layers1=rnn_n_layers,
            rnn_hidden_size1=rnn_hidden_size,
            rnn_n_layers2=rnn_n_layers2,
            rnn_hidden_size2=rnn_hidden_size2,
            rnn_n_layers3=rnn_n_layers3,
            rnn_hidden_size3=rnn_hidden_size3,
            mlp_n_layers=mlp_n_layers,
            mlp_hidden_size=mlp_hidden_size,
            n_labels=n_labels,
            use_crf=use_crf,
            embed_dropout=embed_dropout,
            rnn_dropout=rnn_dropout,
            biaffine_dropout=biaffine_dropout,
            mlp_dropout=mlp_dropout,
            chunk_vector_dropout=chunk_vector_dropout,
            subword_vector_dropout=subword_vector_dropout,
            pretrained_unigram_embed_size=pretrained_unigram_embed_size,
            pretrained_bigram_embed_size=pretrained_bigram_embed_size,
            pretrained_chunk_embed_size=pretrained_chunk_embed_size,
            pretrained_subword_embed_size=pretrained_subword_embed_size,
            pretrained_embed_usage=pretrained_embed_usage,
            chunk_pooling_type=chunk_pooling_type,
            subword_pooling_type=subword_pooling_type,
            min_chunk_len=min_chunk_len,
            max_chunk_len=max_chunk_len,
            min_subword_len=min_subword_len,
            max_subword_len=max_subword_len,
            chunk_loss_ratio=chunk_loss_ratio,
            subword_loss_ratio=subword_loss_ratio,
            biaffine_type=biaffine_type,
            reverse=reverse)

    elif n_ccs > 0 and cc_embed_size > 0:
        tagger = RNNTaggerWithCC(
            n_vocab=n_vocab,
            unigram_embed_size=unigram_embed_size,
            n_bigrams=n_bigrams,
            bigram_embed_size=bigram_embed_size,
            n_ccs=n_ccs,
            cc_embed_size=cc_embed_size,
            rnn_unit_type=rnn_unit_type,
            rnn_bidirection=rnn_bidirection,
            rnn_batch_first=rnn_batch_first,
            rnn_n_layers1=rnn_n_layers,
            rnn_hidden_size1=rnn_hidden_size,
            rnn_n_layers2=rnn_n_layers2,
            rnn_hidden_size2=rnn_hidden_size2,
            mlp_n_layers=mlp_n_layers,
            mlp_hidden_size=mlp_hidden_size,
            n_labels=n_labels,
            use_crf=use_crf,
            embed_dropout=embed_dropout,
            rnn_dropout=rnn_dropout,
            biaffine_dropout=biaffine_dropout,
            mlp_dropout=mlp_dropout,
            cc_vector_dropout=cc_vector_dropout,
            pretrained_unigram_embed_size=pretrained_unigram_embed_size,
            pretrained_bigram_embed_size=pretrained_bigram_embed_size,
            pretrained_cc_embed_size=pretrained_cc_embed_size,
            pretrained_embed_usage=pretrained_embed_usage,
            cc_pooling_type=cc_pooling_type,
            min_cc_len=min_cc_len,
            max_cc_len=max_cc_len,
            cc_loss_ratio=cc_loss_ratio,
            biaffine_type=biaffine_type)

    elif n_chunks > 0 and chunk_embed_size > 0:
        tagger = RNNTaggerWithChunk(
            n_vocab=n_vocab,
            unigram_embed_size=unigram_embed_size,
            n_bigrams=n_bigrams,
            bigram_embed_size=bigram_embed_size,
            n_chunks=n_chunks,
            chunk_embed_size=chunk_embed_size,
            rnn_unit_type=rnn_unit_type,
            rnn_bidirection=rnn_bidirection,
            rnn_batch_first=rnn_batch_first,
            rnn_n_layers1=rnn_n_layers,
            rnn_hidden_size1=rnn_hidden_size,
            rnn_n_layers2=rnn_n_layers2,
            rnn_hidden_size2=rnn_hidden_size2,
            mlp_n_layers=mlp_n_layers,
            mlp_hidden_size=mlp_hidden_size,
            n_labels=n_labels,
            use_crf=use_crf,
            embed_dropout=embed_dropout,
            rnn_dropout=rnn_dropout,
            biaffine_dropout=biaffine_dropout,
            mlp_dropout=mlp_dropout,
            chunk_vector_dropout=chunk_vector_dropout,
            pretrained_unigram_embed_size=pretrained_unigram_embed_size,
            pretrained_bigram_embed_size=pretrained_bigram_embed_size,
            pretrained_chunk_embed_size=pretrained_chunk_embed_size,
            pretrained_embed_usage=pretrained_embed_usage,
            chunk_pooling_type=chunk_pooling_type,
            min_chunk_len=min_chunk_len,
            max_chunk_len=max_chunk_len,
            chunk_loss_ratio=chunk_loss_ratio,
            biaffine_type=biaffine_type)

    else:
        tagger = RNNTagger(
            n_vocab=n_vocab,
            unigram_embed_size=unigram_embed_size,
            n_bigrams=n_bigrams,
            bigram_embed_size=bigram_embed_size,
            rnn_unit_type=rnn_unit_type,
            rnn_bidirection=rnn_bidirection,
            rnn_batch_first=rnn_batch_first,
            rnn_n_layers=rnn_n_layers,
            rnn_hidden_size=rnn_hidden_size,
            mlp_n_layers=mlp_n_layers,
            mlp_hidden_size=mlp_hidden_size,
            n_labels=n_labels,
            use_crf=use_crf,
            mlp_additional_hidden_size=mlp_additional_hidden_size,
            embed_dropout=embed_dropout,
            rnn_dropout=rnn_dropout,
            mlp_dropout=mlp_dropout,
            pretrained_unigram_embed_size=pretrained_unigram_embed_size,
            pretrained_bigram_embed_size=pretrained_bigram_embed_size,
            pretrained_embed_usage=pretrained_embed_usage)

    return tagger


def construct_TFMTagger(n_vocab,
                        unigram_embed_size,
                        tfm_n_layers,
                        tfm_ff_hidden_size,
                        tfm_hidden_size,
                        tfm_n_heads,
                        mlp_n_layers,
                        mlp_hidden_size,
                        n_labels,
                        use_crf=True,
                        embed_dropout=0.0,
                        tfm_dropout=0.0,
                        mlp_dropout=0.0,
                        max_seq_len=5000,
                        pretrained_unigram_embed_size=0,
                        pretrained_embed_usage=ModelUsage.NONE):
    tagger = TFMTagger(
        n_vocab=n_vocab,
        unigram_embed_size=unigram_embed_size,
        tfm_n_layers=tfm_n_layers,
        tfm_ff_hidden_size=tfm_ff_hidden_size,
        tfm_hidden_size=tfm_hidden_size,
        tfm_n_heads=tfm_n_heads,
        mlp_n_layers=mlp_n_layers,
        mlp_hidden_size=mlp_hidden_size,
        n_labels=n_labels,
        use_crf=use_crf,
        embed_dropout=embed_dropout,
        tfm_dropout=tfm_dropout,
        mlp_dropout=mlp_dropout,
        max_seq_len=max_seq_len,
        pretrained_unigram_embed_size=pretrained_unigram_embed_size,
        pretrained_embed_usage=pretrained_embed_usage)

    return tagger
